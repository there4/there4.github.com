<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tavern | There4 Development]]></title>
  <link href="http://there4.github.com/blog/categories/tavern/atom.xml" rel="self"/>
  <link href="http://there4.github.com/"/>
  <updated>2014-08-27T14:06:41+00:00</updated>
  <id>http://there4.github.com/</id>
  <author>
    <name><![CDATA[Craig Davis]]></name>
    <email><![CDATA[craig@there4development.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's your front-end workflow]]></title>
    <link href="http://there4.github.com/blog/2014/08/27/whats-your-front-end-workflow/"/>
    <updated>2014-08-27T07:57:00+00:00</updated>
    <id>http://there4.github.com/blog/2014/08/27/whats-your-front-end-workflow</id>
    <content type="html"><![CDATA[<p>My response from <a href="http://zurb.com/tavern/questions/what-s-your-front-end-workflow">Tavern</a>:</p>

<p>I develop in the <a href="http://www.sublimetext.com/">Sublime text editor</a> and with <a href="http://gruntjs.com/">Grunt</a> and <a href="https://github.com/indeyets/pake">Pake</a>. Grunt is a JS automation tool that has plugins for nearly every task that you might need. It's capable of building assets, running a development server, or doing deployments. It really is brilliant. Pake is a php build tool that has robust plugins for ssh and building an asset pipeline.</p>

<p>Source control is an essential part of my workflow. In particular, I use a collection of commit hooks to run automated code analysis when I commit changes. For instance, I run a JavaScript linter that checks for code errors and code style problems. For instance trailing commas in some instances can cause problems for IE. With a commit hook linter, you'll never be able to commit code with that particular problem.</p>

<p>During development, I run two processes with Grunt. I run a local development server with <a href="https://github.com/gruntjs/grunt-contrib-connect">Grunt Connect</a>, and a watch command with <a href="https://github.com/gruntjs/grunt-contrib-watch">Grunt Watch</a>. The <code>grunt connect</code> server allows me to skip dealing with setting up a local webserver or dealing with apache. It also allows me to quickly spin up a copy of the project on a different computer. It's self contained. With <code>grunt watch</code>, I can configure a set of actions to take place whenever files change. So, if I've chosen to use <a href="http://lesscss.org/">LESS</a> on a project, anytime that I save changes to a <code>.less</code> file, grunt will rebuild my css files for me.</p>

<p>I automate as much as possible. When I do discover a problem, I let it go. When I see that same problem for about the third time, I add automation to prevent it from happening again. This can lead to a bit of accumulation of tools, but with Grunt in particular, it's easy to manage and compartmentalize them.</p>

<p>I'd like to also point out a couple of great testing tools - <a href="http://crossbrowsertesting.com/">Cross Browser Testing</a> and the <a href="https://developer.apple.com/xcode/downloads/">iOS simulator in XCode</a>. Cross Browser makes it easy to quickly take screenshots across a wide variety of browsers and operating systems. If you do discover a problem you can use remote desktop to connect to that machine and use a real browser to continue to troubleshoot. The iOS simulator from XCode allows you to run a local simulator for iPad and iPhone. It can greatly speed up troubleshooting small screen problems with design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What do you do when a project gets stalled?]]></title>
    <link href="http://there4.github.com/blog/2014/08/26/what-do-you-do-when-a-project-gets-stalled/"/>
    <updated>2014-08-26T17:31:00+00:00</updated>
    <id>http://there4.github.com/blog/2014/08/26/what-do-you-do-when-a-project-gets-stalled</id>
    <content type="html"><![CDATA[<p>My response from <a href="http://zurb.com/tavern/questions/what-s-your-front-end-workflow">Tavern</a>:</p>

<p>For some types of stuck, adding constraints can reduce the burden of choices. For instance, a full page design my feel overwhelming, but designing first for mobile may reduce the information to a manageable set of decisions.</p>

<p>Likewise with development, choices can feel like a burden. But, with added constraints you can relieve some of these. Perhaps with your application you are staring into the abyss considering data synchronization and needing an api design, a data store, and a decision about synchronization strategies. In this case you could potentially add some fixture data to the web application to remove the need for the api, use local storage to eliminate the data store for the time being and then keep developing. Momentum is won in small wins built over time.</p>

<p>This doesnâ€™t mean that you should allow your project to grow organically. However, in identifying which parts can be run concurrently, or that be mocked while waiting for more information, more inspiration, or more time, you can keep a project un-stuck by working on smaller pieces.</p>

<p>If you are going to eat an elephant, you must do it bite by bite.</p>
]]></content>
  </entry>
  
</feed>
