<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[There4 Development]]></title>
  <link href="http://there4.github.com/atom.xml" rel="self"/>
  <link href="http://there4.github.com/"/>
  <updated>2014-08-27T14:06:41+00:00</updated>
  <id>http://there4.github.com/</id>
  <author>
    <name><![CDATA[Craig Davis]]></name>
    <email><![CDATA[craig@there4development.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's your front-end workflow]]></title>
    <link href="http://there4.github.com/blog/2014/08/27/whats-your-front-end-workflow/"/>
    <updated>2014-08-27T07:57:00+00:00</updated>
    <id>http://there4.github.com/blog/2014/08/27/whats-your-front-end-workflow</id>
    <content type="html"><![CDATA[<p>My response from <a href="http://zurb.com/tavern/questions/what-s-your-front-end-workflow">Tavern</a>:</p>

<p>I develop in the <a href="http://www.sublimetext.com/">Sublime text editor</a> and with <a href="http://gruntjs.com/">Grunt</a> and <a href="https://github.com/indeyets/pake">Pake</a>. Grunt is a JS automation tool that has plugins for nearly every task that you might need. It&#8217;s capable of building assets, running a development server, or doing deployments. It really is brilliant. Pake is a php build tool that has robust plugins for ssh and building an asset pipeline.</p>

<p>Source control is an essential part of my workflow. In particular, I use a collection of commit hooks to run automated code analysis when I commit changes. For instance, I run a JavaScript linter that checks for code errors and code style problems. For instance trailing commas in some instances can cause problems for IE. With a commit hook linter, you&#8217;ll never be able to commit code with that particular problem.</p>

<p>During development, I run two processes with Grunt. I run a local development server with <a href="https://github.com/gruntjs/grunt-contrib-connect">Grunt Connect</a>, and a watch command with <a href="https://github.com/gruntjs/grunt-contrib-watch">Grunt Watch</a>. The <code>grunt connect</code> server allows me to skip dealing with setting up a local webserver or dealing with apache. It also allows me to quickly spin up a copy of the project on a different computer. It&#8217;s self contained. With <code>grunt watch</code>, I can configure a set of actions to take place whenever files change. So, if I&#8217;ve chosen to use <a href="http://lesscss.org/">LESS</a> on a project, anytime that I save changes to a <code>.less</code> file, grunt will rebuild my css files for me.</p>

<p>I automate as much as possible. When I do discover a problem, I let it go. When I see that same problem for about the third time, I add automation to prevent it from happening again. This can lead to a bit of accumulation of tools, but with Grunt in particular, it&#8217;s easy to manage and compartmentalize them.</p>

<p>I&#8217;d like to also point out a couple of great testing tools - <a href="http://crossbrowsertesting.com/">Cross Browser Testing</a> and the <a href="https://developer.apple.com/xcode/downloads/">iOS simulator in XCode</a>. Cross Browser makes it easy to quickly take screenshots across a wide variety of browsers and operating systems. If you do discover a problem you can use remote desktop to connect to that machine and use a real browser to continue to troubleshoot. The iOS simulator from XCode allows you to run a local simulator for iPad and iPhone. It can greatly speed up troubleshooting small screen problems with design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What do you do when a project gets stalled?]]></title>
    <link href="http://there4.github.com/blog/2014/08/26/what-do-you-do-when-a-project-gets-stalled/"/>
    <updated>2014-08-26T17:31:00+00:00</updated>
    <id>http://there4.github.com/blog/2014/08/26/what-do-you-do-when-a-project-gets-stalled</id>
    <content type="html"><![CDATA[<p>My response from <a href="http://zurb.com/tavern/questions/what-s-your-front-end-workflow">Tavern</a>:</p>

<p>For some types of stuck, adding constraints can reduce the burden of choices. For instance, a full page design my feel overwhelming, but designing first for mobile may reduce the information to a manageable set of decisions.</p>

<p>Likewise with development, choices can feel like a burden. But, with added constraints you can relieve some of these. Perhaps with your application you are staring into the abyss considering data synchronization and needing an api design, a data store, and a decision about synchronization strategies. In this case you could potentially add some fixture data to the web application to remove the need for the api, use local storage to eliminate the data store for the time being and then keep developing. Momentum is won in small wins built over time.</p>

<p>This doesnâ€™t mean that you should allow your project to grow organically. However, in identifying which parts can be run concurrently, or that be mocked while waiting for more information, more inspiration, or more time, you can keep a project un-stuck by working on smaller pieces.</p>

<p>If you are going to eat an elephant, you must do it bite by bite.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Feeds for JavaScript and PHP]]></title>
    <link href="http://there4.github.com/blog/2014/03/25/twitter-feeds-for-javascript-and-php/"/>
    <updated>2014-03-25T09:36:00+00:00</updated>
    <id>http://there4.github.com/blog/2014/03/25/twitter-feeds-for-javascript-and-php</id>
    <content type="html"><![CDATA[<p>I&#8217;ve found that my GitHub activity page has been a great resource for discovering new projects. In particular, finding the right people to follow has been key. As an experiment, I&#8217;ve created two new twitter accounts to expose some of this.</p>

<p>I&#8217;ve created two new accounts and GitHub and two matching ones on Twitter, <a href="https://twitter.com/javascriptstars">one for JavaScript</a> and <a href="https://twitter.com/php_stars">one for PHP</a>, and I&#8217;ve followed creative and interesting developers with both GitHub accounts. When someone that they are following on GitHub stars a project, the Twitter accounts tweet about it.</p>

<h2>Processing With Yahoo Pipes and Ifttt</h2>

<p>These accounts each generate two RSS feeds. I use <a href="http://pipes.yahoo.com/pipes/">Yahoo Pipes</a> to combine and filter these feeds. You can see how this currently works:</p>

<p><img src="http://there4.github.com/images/pipes-workflow.png" title="Yahoo Pipes" alt="Filtering and Combining" /></p>

<p>The output feed is then given to <a href="https://ifttt.com">Ifttt.com</a> to post to Twitter.</p>

<h2>The Resuling Feed</h2>

<p><a class="twitter-timeline" href="https://twitter.com/javascriptstars" data-widget-id="448600771701907457">Tweets by @javascriptstars</a></p>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>


<p><a class="twitter-timeline" href="https://twitter.com/php_stars" data-widget-id="448600549517058049">Tweets by @php_stars</a></p>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Slim PHP Framework applications with PHPUnit]]></title>
    <link href="http://there4.github.com/blog/2013/10/13/unit-testing-slim-framework-applications-with-phpunit/"/>
    <updated>2013-10-13T11:45:00+00:00</updated>
    <id>http://there4.github.com/blog/2013/10/13/unit-testing-slim-framework-applications-with-phpunit</id>
    <content type="html"><![CDATA[<p><a href="http://www.slimframework.com/">Slim</a> is a great PHP framework with a small footprint and everything you need to build fast applications. I&#8217;ve found it particularly well suited to delivering data to <a href="http://backbonejs.org">BackboneJS</a> applications.</p>

<p>However, I haven&#8217;t found a great deal of information about integration and unit testing with Slim, and have developed an approach that allows complete end-to-end testing of an application. You can use this testing a REST framework, or a complete website. In particular, I think it&#8217;s a great way to handle regression testing. I&#8217;m presenting a <a href="https://github.com/there4/slim-unit-testing-example">sample application</a> that I hope will help others on their path to using this great framework.</p>

<h2>Example</h2>

<p>Here&#8217;s <a href="https://github.com/there4/slim-unit-testing-example/blob/master/tests/integration/VersionTest.php">a test</a> for a very simple endpoint that returns the version from the application config. We&#8217;re asserting that Slim responded with a <code>200</code> and that the version matches what we expect.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">class VersionTest extends Slim_Framework_TestCase {</span>
</span><span class='line'><span class="x">    public function testVersion() {</span>
</span><span class='line'><span class="x">        $this-&gt;get(&#39;/version&#39;);</span>
</span><span class='line'><span class="x">        $this-&gt;assertEquals(200, $this-&gt;response-&gt;status());</span>
</span><span class='line'><span class="x">        $this-&gt;assertEquals($this-&gt;app-&gt;config(&#39;version&#39;), $this-&gt;response-&gt;body());</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Concepts</h2>

<p>The core idea of this approach is that we isolate our application routes into their own file. This allows us to include this route file into both a production context via an index.php file, and also include it within a unit testing bootstrap harness in our testing context. The unit testing context with use the internal <code>Slim\Environment::mock()</code> method to setup an environment for our application.</p>

<p>Here&#8217;s what the app looks like:</p>

<ul>
<li>app/

<ul>
<li>app.php</li>
</ul>
</li>
<li>public/

<ul>
<li>index.php</li>
<li>.htaccess</li>
</ul>
</li>
<li>tests/

<ul>
<li>bootstrap.php</li>
<li>integration/

<ul>
<li>VersionTest.php</li>
<li>UsersTest.php</li>
</ul>
</li>
</ul>
</li>
<li>phpunit.xml</li>
</ul>


<p>The <code>public/index.php</code> file serves as the application entry point. This file initializes a SlimPHP <code>$app</code> with production configuration, includes the routes file from <code>app/app.php</code> and then runs the app with <code>$app-&gt;run();</code>. This allows us to keep our application separate from the index, and gives us an opportunity to include our <code>app/app.php</code> file in a different context.</p>

<p>When phpunit runs, it looks for the phpunit.xml file in our root. This file specifies a testing bootstrap file. PHPUnit includes <code>testing/bootstrap.php</code>. This file creates an <code>$app</code>, just like in <code>index/index.php</code>, but it uses testing configuration. The bootstrap keeps a reference to <code>$app</code> for the testing framework, and then provides several helper methods for <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, <code>HEAD</code>, and <code>DELETE</code>.</p>

<p>With these methods, you can run end to end tests on SlimPHP routes without a webserver. The tests run entirely within a mock environment, and will be fast and efficient.</p>

<h2>The Bootstrap</h2>

<p>You can see the <a href="https://github.com/there4/slim-unit-testing-example/blob/master/tests/bootstrap.php">full bootstrap</a> at gitub. Here&#8217;s some extra comments about what&#8217;s going on:</p>

<p>Before each unit test method is run, we make a fresh environment for Slim</p>

<pre><code>public function setup() {
</code></pre>

<p>Initialize our app, this should mimic your production setup. During an integration test, the system under test should be as nearly identical to production as possible. Here&#8217;s the creation of our application:</p>

<pre><code>$app = new \Slim\Slim(array(
  'version' =&gt; '0.0.0',
  'debug'   =&gt; false,
  'mode'    =&gt; 'testing'
));
</code></pre>

<p>Include our application routes file.</p>

<pre><code>require __DIR__ . '/../app/app.php';
</code></pre>

<p>This one may not be the exact spirit of PHPUnit, but I find that it&#8217;s a convienent way of accessing our application while it&#8217;s under test. We add a reference to the application onto our phpunit instance.</p>

<pre><code>$this-&gt;app = $app;
</code></pre>

<p>End our test method setup</p>

<pre><code>}
</code></pre>

<p>Now, we add a way to PHPUnit to trigger our routes by adding a new function called <code>request()</code>. This is a generic method for all HTTP methods, and we&#8217;ll use to make shorthand methods for <code>get()</code>, <code>post()</code>, etc.</p>

<pre><code>public function request($method, $path, $options = array())
{
</code></pre>

<p>Some slim actions are going to print to STDOUT. We&#8217;ll use output buffering to trap this so that we can inspect output and run the application quietly.</p>

<pre><code>ob_start();
</code></pre>

<p>This is the heart of this approach, creating a mock environment for Slim. This lets us run the unit tests without a webserver, without curl, without anything other than PHPUnit. This sets up the environment as if the application was running under a webserver:</p>

<pre><code>\Slim\Environment::mock(array_merge(array(
    'REQUEST_METHOD' =&gt; $method,
    'PATH_INFO'      =&gt; $path,
    'SERVER_NAME'    =&gt; 'local.dev',
), $options));
</code></pre>

<p>These are strictly for shorthand access in test methods. It allows us to do things like <code>$this-&gt;assertEquals(200, $this-&gt;response-&gt;status());</code>.</p>

<pre><code>$this-&gt;request  = $this-&gt;app-&gt;request();
$this-&gt;response = $this-&gt;app-&gt;response();
</code></pre>

<p>Execute our slim application within our testing environment. This fires the routes that were setup in the environment mocking.</p>

<pre><code>$this-&gt;app-&gt;run();
</code></pre>

<p>Return the application output. Also available in <code>response-&gt;body()</code></p>

<pre><code>return ob_get_clean();
</code></pre>

<p>End the request mocking.</p>

<pre><code>}
</code></pre>

<p>This <code>request()</code> allows us to write shorthand methods and easily run Slim routes.</p>

<h2>Unit Testing vs. Integration Testing</h2>

<p>Unit tests should test an individual part of code. The system under test should be as small as possible. You would unit test an individual method. Integration testing exercises an entire system. Most of this example is about integration testing. We are running tests that work Slim from initial instantiation to the final delivery of data. With integration tests, we&#8217;re treating the entire application as a unit, setting up a particular initial environment and then executing the <code>run()</code> command and finally inspecting the results to ensure that they match our expectations.</p>

<h2>Mocking with SlimPHP</h2>

<p>See the <a href="https://github.com/there4/slim-unit-testing-example/blob/master/tests/integration/ZenTest.php">ZenTest</a> for an example of mocking with SlimPHP dependency injection. In this test we mock a Curl wrapper class from <a href="https://github.com/shuber/curl">Shuber</a>. This allows us to substitute responses and exercise the parts of our application that we feel need testing. It also allows us to run these unit tests on systems that don&#8217;t have the curl extension installed. We&#8217;re totally isolated from that dependency while this running test.</p>

<p>The <a href="https://github.com/there4/slim-unit-testing-example/blob/master/tests/integration/FileStoreTest.php">FileStoreTest</a> uses a mock for the authentication class. Notice that the file store route doesn&#8217;t use that class directly, but instead it is used by the application authenticator method. We&#8217;re using the app dependency injection container to swap out the real object for a mock version. This approach allows us to control authentication results from within our test harness.</p>

<p>You can read more about dependency injection in the <a href="http://docs.slimframework.com/#Dependency-Injection">SlimDocs on DI</a>, and more about mock objects in the <a href="http://phpunit.de/manual/3.0/en/mock-objects.html">PHPUnit docs</a>.</p>

<p><a href="https://github.com/there4/slim-unit-testing-example" id="github">
  <img alt="Fork me on GitHub" src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" />
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partial API Mocking in Backbone JavaScript]]></title>
    <link href="http://there4.github.com/blog/2013/03/29/partial-api-mocking-in-backbone-javascript/"/>
    <updated>2013-03-29T07:34:00+00:00</updated>
    <id>http://there4.github.com/blog/2013/03/29/partial-api-mocking-in-backbone-javascript</id>
    <content type="html"><![CDATA[<p>This project allows a <a href="http://backbonejs.org/">BackboneJS</a> application to use fixture data in the UI
for particular endpoints. This allows an app to use <strong>an existing API</strong> for
authentication and existing endpoints, <strong>while mocking new endpoints for
development</strong>. While I use this with Backbone, it&#8217;s not tied to any library. This
will work with any framework, including <a href="http://emberjs.com/">Ember</a> and <a href="http://angularjs.org/">Angular</a>.</p>

<p>In the course of application development, I&#8217;ve often found the API and the UI
in a sort of race between developing new api API endpoints and consuming them in
the UI. Unfortunately, I&#8217;ve found that I often ask for one more property on an
object, or ask to change to a return format later in the game. With this new
workflow, the api and UI can develop in a much more concurrent manner. Here&#8217;s
my new approach:</p>

<ol>
<li>Add a new mock fixture for an endpoint with a rough approximation of the JSON
return format. The API team helps design this data spec and can begin work on
their implementation.</li>
<li>Write the backbone models, collections, and views.</li>
<li>Write some basic unit tests.</li>
<li>Add some templates and start using the data in the UI.</li>
<li>Iterate some changes in the data until the layout is complete.</li>
<li>Hand this JSON fixture to the API team for implementation.</li>
<li>This json spec then <strong>becomes the contract between the API and the UI</strong>.</li>
<li>Both teams complete their unit testing based on this format.</li>
<li>The live release only involves removing the mock data endpoint.</li>
</ol>


<p>The best part about this approach is that because we&#8217;re intercepting the
<a href="http://api.jquery.com/jQuery.ajax/">XHR request</a> with <a href="http://sinonjs.org/">Sinon</a>, the Backbone models <em>never know</em> that
they didn&#8217;t communicate with the api. Development with this allows you ignore
the fact that you&#8217;re using mock data.</p>

<p><a href="https://github.com/there4/partial-api-mock">Check out the repo</a> for examples and implementation.</p>

<p><a href="https://github.com/there4/partial-api-mock" id="github">
  <img alt="Fork me on GitHub" src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png">
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing TermCamp, a Campfire command line client]]></title>
    <link href="http://there4.github.com/blog/2013/01/16/introducing-campfire-chat-on-the-command-line/"/>
    <updated>2013-01-16T20:47:00+00:00</updated>
    <id>http://there4.github.com/blog/2013/01/16/introducing-campfire-chat-on-the-command-line</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bengl/node-termcamp">TermCamp</a> is a new command line client for <a href="http://37signals.com/">37 Signals</a> <a href="http://campfirenow.com/">Campfire Chat</a>.
It&#8217;s written for <a href="http://nodejs.org/">node</a>, and looks like this:</p>

<p><img src="http://there4.github.com/assets/images/posts/termcamp-sample.png" title="[574] [377] [Sample TermCamp]" ></p>

<p>It&#8217;s got a nice collection of features that make it a remarkably complete client:</p>

<ul>
<li>Bell alerts for name mentions</li>
<li>Formatting for all Campfire message types (Even tweets!)</li>
<li>Name colorization (optional)</li>
<li>Enter and exit notifications</li>
</ul>


<p>I&#8217;ve used it as my primary client by keeping it in a <a href="http://tmux.sourceforge.net/">tmux</a> pane, and it&#8217;s
performed well. Unfortunately, it&#8217;s missing a few things. The urls for pasted
images are still missing, and you can&#8217;t paste text. It&#8217;s a little better for
listening to a room than for pasting and long conversations. But, we use
<a href="http://hubot.github.com/">Hubot</a> and <a href="http://www.fogcreek.com/kiln/">Kiln</a> bots for relaying messages, and this terminal
client is perfect for that use case.</p>

<p>You can <a href="https://github.com/bengl/node-termcamp">clone or fork the project</a> on GitHub.</p>

<p><a href="https://github.com/bengl/node-termcamp" id="github">
  <img alt="Fork me on GitHub" src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" />
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating JSONP with HiFi CMS]]></title>
    <link href="http://there4.github.com/blog/2013/01/05/generating-jsonp-with-hifi-cms/"/>
    <updated>2013-01-05T09:13:00+00:00</updated>
    <id>http://there4.github.com/blog/2013/01/05/generating-jsonp-with-hifi-cms</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using <a href="http://www.gethifi.com/">HiFi CMS</a> in a variety of projects lately. I&#8217;m weary of
maintaining CMS platforms and have generally moved to <a href="http://pages.github.com/">GitHub Pages</a> and
HiFi. HiFi has proven to be remarkably flexible with it&#8217;s <a href="http://twig.sensiolabs.org/">Twig</a> driven
layout system, and I&#8217;d like to show how to leverage it to deliver articles
in JSONP format.</p>

<p>We needed a system to allow our support team to maintain a collection of
embedded help snippets. This allows our application to deliver context sensitive
help that we can maintain outside of the product release cycle. In short,
it keeps the developers from having to maintain help content, while allowing
us to draw help content deeper into the application.</p>

<p>One benefit of HiFi is that it has url driven page templates that use a smart
mime-type system to deliver the correct headers. If you create a template with
a <code>.js</code>, <code>.json</code>, or <code>.jsonp</code> extension, the site will deliver it with the
correct headers. This then means that you can deliver two different versions of
content based on url. We can deliver the posts as plain html for consumption
on the main support site, while allowing us to syndicate the content via
jsonp in our application.</p>

<ul>
<li><p><code>http://hifisite.example.com/help/topic/how-to-skate.html</code> will open the
how to skate article and render it with the <strong>html</strong> template.</p></li>
<li><p><code>http://hifisite.example.com/help/topic/how-to-skate.jsop</code> will open the
how to skate article and render it with the <strong>jsonp</strong> template.</p></li>
</ul>


<p><strong>HiFi Developer Editor:</strong><br/>
<img src="http://there4.github.com/assets/images/posts/hifi-jsonp.png" title="[231] [316] [HiFi Templates with JSONP output]" ></p>

<p>Here&#8217;s the content of the index.jsonp template:</p>

<div><script src='https://gist.github.com/4462076.js?file=index.jsonp'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>I&#8217;ve used this with <a href="http://backbonejs.org/">BackboneJS</a> to fetch help text from a
support article. We&#8217;re extending this model with the url to the article
and a default title.  Note in the <code>index.jsonp</code> file that we&#8217;ve used <code>jsonCallback</code>
as the parameter for the callback function name. This then means that our
ajax request looks like this:</p>

<div><script src='https://gist.github.com/4462137.js?file=jsonp.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>Now we&#8217;ve got a model that allows us to fetch blog posts from our hosted CMS,
while allowing us to continue to host the content on the primary site as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Animated Border: jquery.animatedborders.js]]></title>
    <link href="http://there4.github.com/blog/2013/01/03/jquery-animated-borders/"/>
    <updated>2013-01-03T18:11:00+00:00</updated>
    <id>http://there4.github.com/blog/2013/01/03/jquery-animated-borders</id>
    <content type="html"><![CDATA[<script src="http://there4.github.com/assets/javascript/jquery.animatedborder.js" type="text/javascript"></script>


<script type="text/javascript">

$(function() {
  $('div.alpha').animatedBorder({size : 1, color : 'red'});

  $('div.bravo').click(function(){
    $(this).animatedBorder();
    return false;
  });

  $('div.charlie').animatedBorder({size : 6, color : '#FFCC66'});
  
  $('div.delta').animatedBorder({size: 2, color: '#4E7CB1', hover: true});
});

</script>


<p>Animated borders for any block level element. This plugin creates an animated
border with configurable thickness and color.</p>

<h2>Download</h2>

<ul>
<li><a href="https://github.com/there4/jquery-animatedborder/zipball/master">jquery.animatedborder.zip</a> <small>Master</small></li>
<li><a href="stripe.gif">stripe.gif</a> <small>transparent white, 4x4 check</small></li>
</ul>


<h2>Examples</h2>

<div class="examples clearfix" style="margin: 0 1em 1em;">
  <div class="alpha">Single Pixel</div>
  <div class="bravo"><a href="#">Toggle Highlight</a></div>
  <div class="charlie">Fat Border</div>
  <div class="delta">Hover Triggered</div>
</div>


<h2>Instructions</h2>

<p>The animated border method toggles animated borders on an element. To apply
animated borders to an elements:</p>

<pre><code>$('div.alpha').animatedBorder({size : 1, color : 'red'});
</code></pre>

<p>Apply it again to remove the borders:</p>

<pre><code>$('div.alpha').animatedBorder();
</code></pre>

<p>The plugin accepts a configuration object. You can specify a background color,
and the size of the border.</p>

<pre><code>options = {
  size: 2,
  color: '#6699CC'
}
</code></pre>

<h2>Known Issues</h2>

<ul>
<li><strong>Background patterns</strong> are not handled with the default stripe.gif file.
The plugin uses the the background color of the divs to make the border color.
This means that the non-transparent area of the checkerboard has to match the background color of the
page for the illusion to work. If you had a page with surrounding elements under the border, or you had
a non white background, you should create a new animated gif with blocks that are transparent and the
desired border color.</li>
</ul>


<p><a href="https://github.com/there4/jquery-animatedborder" id="github">
  <img alt="Fork me on GitHub" src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" />
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Resume Builder]]></title>
    <link href="http://there4.github.com/blog/2012/12/31/markdown-resume-builder/"/>
    <updated>2012-12-31T16:39:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/12/31/markdown-resume-builder</id>
    <content type="html"><![CDATA[<p><a href="http://there4development.com/markdown-resume">Markdown Resume Generator</a> is a project that I developed in <a href="http://www.php.net">PHP</a>
to turn a <a href="http://daringfireball.net/projects/markdown">Markdown</a> document into an elegant resume. It will publish in both
HTML and PDF, and will default to using a set of styles with an adaptive
viewport. You&#8217;ll start by making a simple markdown text file, and you&#8217;ll
end up with two files, pixel perfect and ready to print and publish.</p>

<p>You can <a href="https://raw.github.com/there4/markdown-resume/master/resume/sample.md">markup your resume</a> with very simple headings and lists:</p>

<pre><code>### Skills {#skills}

* Web Design
  : Assertively exploit wireless initiatives rather than synergistic core competencies.

* Interface Design
  : Credibly streamline mission-critical value with multifunctional functionalities.

* Project Direction
  : Proven ability to lead and manage a wide variety of design and development projects in team and independent situations.
</code></pre>

<p>And after processing get a very nice output:
<img src="http://there4.github.com/assets/images/posts/resume-sample.png" title="[477] [395] [Sample Resume Output]" ></p>

<p>If there is enough interest in the project, I hope to add another template or
two, and some additional documentation.</p>

<p>For the pdf output, the project leverages
<a href="https://code.google.com/p/wkhtmltopdf">wkhtmltopdf</a>. Check out their wiki for information on
<a href="https://github.com/pdfkit/pdfkit/wiki/Installing-WKHTMLTOPDF">how to install the wkhtmltopdf</a>.</p>

<p>You can view the project on it&#8217;s
<a href="http://there4development.com/markdown-resume">Markdown Resume Project Page</a>. If you&#8217;ve got questions, feel free to
<a href="http://there4development.com/markdown-resume/issues">open an issue</a></p>

<p><a href="https://github.com/there4/markdown-resume" id="github">
  <img alt="Fork me on GitHub" src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" />
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pChart updated with image maps]]></title>
    <link href="http://there4.github.com/blog/2012/10/16/pchart-updated-with-image-maps/"/>
    <updated>2012-10-16T09:20:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/10/16/pchart-updated-with-image-maps</id>
    <content type="html"><![CDATA[<p>Please see the project page at GitHub
for <a href="https://github.com/there4/pchart-map">pChart Image Map</a>.</p>

<p><a href="https://github.com/there4/pchart-map" id="github">
  <img alt="Fork me on GitHub" src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" />
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Pake to build a README file]]></title>
    <link href="http://there4.github.com/blog/2012/09/27/php-pake-to-build-a-readme-file/"/>
    <updated>2012-09-27T15:51:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/09/27/php-pake-to-build-a-readme-file</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been putting together the new <a href="http://there4.github.com/fogbugz-php-cli/">FogBugz Client</a>
and wanted a nice way to build the <a href="https://github.com/there4/fogbugz-php-cli/blob/master/README.md">README.md</a>
file without having to use templates for the file content.</p>

<p>This is a small <a href="https://github.com/indeyets/pake/wiki">Pake</a> command to build
the README. It trims out everything from the Help heading to the following
heading, and places the output of the command in it&#8217;s place. It&#8217;s hackish, but
it keeps the readme up to date.</p>

<div><script src='https://gist.github.com/3796563.js?file=readme_pakefile.php'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AMD Javascript Parse URL]]></title>
    <link href="http://there4.github.com/blog/2012/09/18/amd-javascript-parse-url/"/>
    <updated>2012-09-18T00:00:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/09/18/amd-javascript-parse-url</id>
    <content type="html"><![CDATA[<p>I recently had need to parse a url provided by an api. I looked at a resource such as
<a href="http://medialize.github.com/URI.js/">uri.js</a> but this seemed quite heavy for my
<a href="http://backbonejs.org/">Backbone</a> application.</p>

<p>Here&#8217;s a slightly altered version of the much copied DOM approach to parsing a url.
This version has been edited for AMD <a href="http://requirejs.org/">Require.js</a>, and caches the anchor
element.</p>

<div><script src='https://gist.github.com/3706510.js?file=parse_url.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FogBugz Command Line Client]]></title>
    <link href="http://there4.github.com/blog/2012/09/17/fogbugz-command-line-client/"/>
    <updated>2012-09-17T00:00:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/09/17/fogbugz-command-line-client</id>
    <content type="html"><![CDATA[<p>We use <a href="http://www.fogcreek.com/fogbugz/">FogBugz</a> for <em>everything</em> at work and it&#8217;s a great tool. However, they&#8217;ve
discontinued their command line application for it. While I may be a web tech
developer, I spend most of my time on the command line. Being able to <strong>track time</strong>,
<strong>read case activity</strong> from the command line, and <strong>leave notes</strong> on cases saves me a great deal
of time, and greatly reduces the cognitive load of task switching.</p>

<p>This is a command line tool for managing your FogBugz cases. You&#8217;ll be able to
<strong>start and stop work</strong> on cases, <strong>reassign</strong> cases, <strong>close cases</strong> and
lots more. We&#8217;ve built it to our particular needs, so if it&#8217;s missing anything,
please feel free to <a href="http://there4.github.com/fogbugz-php-cli/">fork it</a> and send me a pull request.</p>

<h2>Time tracking and adding notes:</h2>

<pre><code>&gt; fb start 8439
  Starting work on case 8439
&gt; fb note "Beginning work, setting up on dev2 with fixture data set 3."

--other work, commits, etc.

&gt; fb note "Identfied bug in validation class with utf characters."
&gt; fb stop
  Worked stopped on case 8439
</code></pre>

<h2>Viewing a case:</h2>

<pre><code>&gt; fb view 8745

â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
                        [8745] Update users status endpoint                       
â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Normal priority feature in Production

Status: Open                                                   Area: Development
Assigned: Craig Davis                                        Parent: 8436

Full title:
Update users status endpoint

Latest summary:
Picking up ticket and beginning work. This may be a problem in the validation
routines with UTF characters

Last updated:
August 8, 2012 14:42

             [https://example.fogbugz.com/default.asp?8745]   
</code></pre>

<p>Please see the <a href="http://there4.github.com/fogbugz-php-cli/">FogBugz Command Line Client project page</a> for more
documentation and <strong>installation information</strong>.</p>

<p><a href="https://github.com/there4/fogbugz-php-cli" id="github">
  <img alt="Fork me on GitHub" src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" />
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FogBugz GeckoBoard Widgets]]></title>
    <link href="http://there4.github.com/blog/2012/09/10/fogbugz-geckoboard-widgets/"/>
    <updated>2012-09-10T00:00:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/09/10/fogbugz-geckoboard-widgets</id>
    <content type="html"><![CDATA[<p>I&#8217;ve just released a new project to render <a href="http://www.fogcreek.com/fogbugz/">FogBugz</a> Widgets on <a href="http://www.geckoboard.com/">Geckoboard</a>.
You can checkout the code on via GitHub for the project at
<a href="https://github.com/there4/fogbugz-geckoboard">FogBugz GeckoBoard Widgets</a>.</p>

<p>This will power widgets that can deliver:</p>

<ul>
<li>Kiln activity RSS in a shorter format</li>
<li>A list of what each developer is working on</li>
<li>A list of cases by filter id</li>
<li>Stacked bar graph of current critical, high, and normal cases by count.</li>
</ul>


<p><a href="https://github.com/there4/fogbugz-geckoboard" id="github">
  <img alt="Fork me on GitHub" src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" />
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dotfiles for Puppet Installation]]></title>
    <link href="http://there4.github.com/blog/2012/08/23/dotfiles-for-puppet-installation/"/>
    <updated>2012-08-23T00:00:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/08/23/dotfiles-for-puppet-installation</id>
    <content type="html"><![CDATA[<p>I take my dotfiles with me everywhere I go. With this file in my <a href="http://vagrantup.com/">Vagrant</a>
setup with <a href="http://vagrantup.com/v1/docs/provisioners/puppet.html">Puppet</a>, I&#8217;m able to login and feel right at home.</p>

<p>The basis for my dotfiles is the excellent set from <a href="https://github.com/mathiasbynens/dotfiles">Mathias</a>.</p>

<div><script src='https://gist.github.com/3626841.js?file=package_dev_tools.pp'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handlebars Helpers for Debugging and Pluralization]]></title>
    <link href="http://there4.github.com/blog/2012/07/29/handlebars-helpers-for-debugging-and-pluralization/"/>
    <updated>2012-07-29T00:00:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/07/29/handlebars-helpers-for-debugging-and-pluralization</id>
    <content type="html"><![CDATA[<p>I often find it helpful to dump a handlebars scope out to the console. This
snippet has been quite useful.</p>

<p>Be careful that this doesn&#8217;t make it to production - for instance it would be
good to have a linter check for these  statements in your html templates.</p>

<div><script src='https://gist.github.com/2903216.js?file=handlebars-helpers.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get more exercise during the programming workday]]></title>
    <link href="http://there4.github.com/blog/2012/06/22/get-more-exercise-during-the-programming-workday/"/>
    <updated>2012-06-22T00:00:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/06/22/get-more-exercise-during-the-programming-workday</id>
    <content type="html"><![CDATA[<p>After years of sitting and programming, I&#8217;ve started using a stand-up desk.
And now, I&#8217;ve added one more habit to stay a little more mobile during the
workday.</p>

<p>I&#8217;ve added a global <a href="http://hgbook.red-bean.com/read/handling-repository-events-with-hooks.html">commit hook</a> that suggests exercise every time I make
a mercurial commit. Here&#8217;s the code:</p>

<div><script src='https://gist.github.com/2972827.js?file=exercise.sh'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>I added it to my global .hgrc file as a hook, and now I get a recommendation
for an exercise eat time I commit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Chart Color List]]></title>
    <link href="http://there4.github.com/blog/2012/05/02/google-chart-color-list/"/>
    <updated>2012-05-02T00:00:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/05/02/google-chart-color-list</id>
    <content type="html"><![CDATA[<ul class="sampleColor" style="margin: 1em 0;">
  <li><span style="background-color:#3366CC"></span>#3366CC</li>
  <li><span style="background-color:#DC3912"></span>#DC3912</li>
  <li><span style="background-color:#FF9900"></span>#FF9900</li>
  <li><span style="background-color:#109618"></span>#109618</li>
  <li><span style="background-color:#990099"></span>#990099</li>
  <li><span style="background-color:#3B3EAC"></span>#3B3EAC</li>
  <li><span style="background-color:#0099C6"></span>#0099C6</li>
  <li><span style="background-color:#DD4477"></span>#DD4477</li>
  <li><span style="background-color:#66AA00"></span>#66AA00</li>
  <li><span style="background-color:#B82E2E"></span>#B82E2E</li>
  <li><span style="background-color:#316395"></span>#316395</li>
  <li><span style="background-color:#994499"></span>#994499</li>
  <li><span style="background-color:#22AA99"></span>#22AA99</li>
  <li><span style="background-color:#AAAA11"></span>#AAAA11</li>
  <li><span style="background-color:#6633CC"></span>#6633CC</li>
  <li><span style="background-color:#E67300"></span>#E67300</li>
  <li><span style="background-color:#8B0707"></span>#8B0707</li>
  <li><span style="background-color:#329262"></span>#329262</li>
  <li><span style="background-color:#5574A6"></span>#5574A6</li>
  <li><span style="background-color:#3B3EAC"></span>#3B3EAC</li>
</ul>


<p>This is the list of the first 20 colors from the <a href="https://developers.google.com/chart/">Google Chart</a> Color list.
It&#8217;s a great collection of unique and distinct saturated colors for use in
charts and graphs.</p>

<div><script src='https://gist.github.com/2579834.js?file=chart_colors.txt'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QUnit rules for JSHint]]></title>
    <link href="http://there4.github.com/blog/2012/03/10/qunit-rules-for-jshint/"/>
    <updated>2012-03-10T00:00:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/03/10/qunit-rules-for-jshint</id>
    <content type="html"><![CDATA[<p>While updating the <a href="http://sprawsm.com/uni-form/">Uni-Form CSS</a> project to use <a href="https://github.com/cowboy/grunt">Grunt</a>,
I changed some of the settings for the linter, and for the first time, added
lint rules for the unit test files. Grunt uses JSHint, and by default uses rules
that are a bit more strict than I had used previously. In addition, the global variables from
the <a href="http://qunitjs.com/">QUnit</a> tests were polluting the global namespace, and so I had to tell lint
to ignore those.</p>

<p>Here&#8217;s the final lint rules that I added to the test files, I hope they may be
useful to someone else:</p>

<div><script src='https://gist.github.com/2154156.js?file=jslint-config-for-qunit.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL list of privileges for a database]]></title>
    <link href="http://there4.github.com/blog/2012/02/09/mysql-list-of-privileges-for-a-database/"/>
    <updated>2012-02-09T00:00:00+00:00</updated>
    <id>http://there4.github.com/blog/2012/02/09/mysql-list-of-privileges-for-a-database</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve ever needed to audit a MySQL database for privileges, you know that
the formatting isn&#8217;t always the easiest to read. I use this snippet to keep
a database organized and properly secured.</p>

<div><script src='https://gist.github.com/3266164.js?file=mysql_database_privileges.sql'></script>
<noscript><pre><code></code></pre></noscript></div>

]]></content>
  </entry>
  
</feed>
